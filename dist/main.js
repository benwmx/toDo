/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={965:(t,e,n)=>{n.d(e,{Z:()=>l});var o=n(15),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Klee+One:wght@400;600&display=swap);"]),a.push([t.id,"body {\n  margin: 0;\n  padding: 0;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  background-color: #c3e0e5;\n}\n\ni {\n  cursor: pointer;\n}\n\n.list-container {\n  background-color: #274472;\n  position: relative;\n  overflow-y: auto;\n  display: flex;\n  flex-flow: column;\n  width: 55%;\n  height: 70%;\n  margin: 10% auto;\n  box-shadow: 10px 10px 20px grey;\n  border-radius: 8px;\n  -webkit-border-radius: 8px;\n  -moz-border-radius: 8px;\n  -ms-border-radius: 8px;\n  -o-border-radius: 8px;\n}\n\n.list-container .title {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  min-height: 50px;\n  padding: 0 20px 0 20px;\n  font-size: 1.8rem;\n  color: #e4f4f3;\n  font-family: 'Klee One', cursive;\n  font-weight: 600;\n}\n\n.list-container .add {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  min-height: 50px;\n  border-top: 1px solid gray;\n}\n\n.list-container .add input {\n  background-color: transparent;\n  border: none;\n  margin-left: 20px;\n  width: 80%;\n  min-height: 45px;\n  font-size: 1.3rem;\n  color: #c3e0e5;\n}\n\n.list-container .add #add {\n  margin-right: 20px;\n  font-size: 1.2em;\n  border: none;\n  background-color: transparent;\n  color: #c3e0e5;\n}\n\n.list-container .clear {\n  background-color: #5885af;\n  cursor: pointer;\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  min-height: 50px;\n  text-align: center;\n  border-top: 1px solid gray;\n  color: white;\n}\n\n.list-container .clear:active {\n  color: white;\n  background-color: red;\n}\n\n.completed {\n  text-decoration: line-through;\n  color: gray;\n  font-style: italic;\n}\n\n.d-none {\n  display: none;\n}\n\n.list-container .list {\n  overflow-y: auto;\n  display: flex;\n  flex-flow: column;\n  height: 77%;\n  padding-left: 0;\n  margin: 0;\n}\n\n.list-container .list li {\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n  list-style: none;\n  border: 1px solid gray;\n  border-radius: 8px;\n  -webkit-border-radius: 8px;\n  -moz-border-radius: 8px;\n  -ms-border-radius: 8px;\n  -o-border-radius: 8px;\n}\n\n.list-container .list li .description-container {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 90%;\n  margin: 0;\n  margin-left: 20px;\n  min-height: 70px;\n}\n\n.list-container .list li .description-container p {\n  margin: 10px 5px;\n  width: 90%;\n  font-size: 1.2rem;\n  font-family: 'Klee One', cursive;\n  color: #c3e0e5;\n  word-wrap: break-word;\n}\n\n.list-container .list .description-container .check {\n  appearance: none;\n  width: 1.2rem;\n  height: 1.2rem;\n  border: 2px solid #c3e0e5;\n  margin-right: 10px;\n  background: rgba(255, 241, 241, 0.1);\n}\n\n.list-container .list .description-container .edit-description {\n  min-height: 55px;\n  width: 90%;\n  font-size: 1.2rem;\n  background-color: rgba(255, 255, 255, 0.3);\n  border: none;\n}\n\n.fa-trash {\n  color: red;\n  padding: 10px;\n  font-size: 1.3rem;\n  margin-right: 15px;\n}\n\n.fa-check {\n  font-size: 1.5rem;\n  color: #c3e0e5;\n}\n\n.fa-edit {\n  font-size: 1.3rem;\n  margin-right: 15px;\n  color: #c3e0e5;\n}\n\n.dragging {\n  background-color: #0fabbd;\n}\n\n/* fork me style */\n\n#forkongithub a {\n  background: #274472;\n  color: #c3e0e5;\n  text-decoration: none;\n  font-family: arial, sans-serif;\n  text-align: center;\n  font-weight: bold;\n  padding: 5px 40px;\n  font-size: 1rem;\n  line-height: 2rem;\n  position: relative;\n  transition: 0.5s;\n  -webkit-transition: 0.5s;\n  -moz-transition: 0.5s;\n  -ms-transition: 0.5s;\n  -o-transition: 0.5s;\n}\n\n#forkongithub a:hover {\n  background: #5885af;\n  color: #c3e0e5;\n}\n\n#forkongithub a::before,\n#forkongithub a::after {\n  content: \"\";\n  width: 100%;\n  display: block;\n  position: absolute;\n  top: 1px;\n  left: 0;\n  height: 1px;\n  background: #fff;\n}\n\n#forkongithub a::after {\n  bottom: 1px;\n  top: auto;\n}\n\n@media screen and (min-width: 800px) {\n  #forkongithub {\n    position: fixed;\n    display: block;\n    top: 0;\n    right: 0;\n    width: 200px;\n    overflow: hidden;\n    height: 200px;\n    z-index: 9999;\n  }\n\n  #forkongithub a {\n    width: 200px;\n    position: absolute;\n    top: 60px;\n    right: -60px;\n    transform: rotate(45deg);\n    -webkit-transform: rotate(45deg);\n    -ms-transform: rotate(45deg);\n    -moz-transform: rotate(45deg);\n    -o-transform: rotate(45deg);\n    box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.8);\n  }\n}\n","",{version:3,sources:["webpack://./src/style-src.css"],names:[],mappings:"AAEA;EACE,SAAS;EACT,UAAU;EACV,YAAY;EACZ,aAAa;EACb,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,gBAAgB;EAChB,aAAa;EACb,iBAAiB;EACjB,UAAU;EACV,WAAW;EACX,gBAAgB;EAChB,+BAA+B;EAC/B,kBAAkB;EAClB,0BAA0B;EAC1B,uBAAuB;EACvB,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,gBAAgB;EAChB,sBAAsB;EACtB,iBAAiB;EACjB,cAAc;EACd,gCAAgC;EAChC,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,gBAAgB;EAChB,0BAA0B;AAC5B;;AAEA;EACE,6BAA6B;EAC7B,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,gBAAgB;EAChB,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,YAAY;EACZ,6BAA6B;EAC7B,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,eAAe;EACf,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,OAAO;EACP,gBAAgB;EAChB,kBAAkB;EAClB,0BAA0B;EAC1B,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,6BAA6B;EAC7B,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,iBAAiB;EACjB,WAAW;EACX,eAAe;EACf,SAAS;AACX;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,qBAAqB;EACrB,gBAAgB;EAChB,sBAAsB;EACtB,kBAAkB;EAClB,0BAA0B;EAC1B,uBAAuB;EACvB,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,2BAA2B;EAC3B,mBAAmB;EACnB,UAAU;EACV,SAAS;EACT,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,UAAU;EACV,iBAAiB;EACjB,gCAAgC;EAChC,cAAc;EACd,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,cAAc;EACd,yBAAyB;EACzB,kBAAkB;EAClB,oCAAoC;AACtC;;AAEA;EACE,gBAAgB;EAChB,UAAU;EACV,iBAAiB;EACjB,0CAA0C;EAC1C,YAAY;AACd;;AAEA;EACE,UAAU;EACV,aAAa;EACb,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,kBAAkB;;AAElB;EACE,mBAAmB;EACnB,cAAc;EACd,qBAAqB;EACrB,8BAA8B;EAC9B,kBAAkB;EAClB,iBAAiB;EACjB,iBAAiB;EACjB,eAAe;EACf,iBAAiB;EACjB,kBAAkB;EAClB,gBAAgB;EAChB,wBAAwB;EACxB,qBAAqB;EACrB,oBAAoB;EACpB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,cAAc;AAChB;;AAEA;;EAEE,WAAW;EACX,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,QAAQ;EACR,OAAO;EACP,WAAW;EACX,gBAAgB;AAClB;;AAEA;EACE,WAAW;EACX,SAAS;AACX;;AAEA;EACE;IACE,eAAe;IACf,cAAc;IACd,MAAM;IACN,QAAQ;IACR,YAAY;IACZ,gBAAgB;IAChB,aAAa;IACb,aAAa;EACf;;EAEA;IACE,YAAY;IACZ,kBAAkB;IAClB,SAAS;IACT,YAAY;IACZ,wBAAwB;IACxB,gCAAgC;IAChC,4BAA4B;IAC5B,6BAA6B;IAC7B,2BAA2B;IAC3B,2CAA2C;EAC7C;AACF",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Klee+One:wght@400;600&display=swap');\n\nbody {\n  margin: 0;\n  padding: 0;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  background-color: #c3e0e5;\n}\n\ni {\n  cursor: pointer;\n}\n\n.list-container {\n  background-color: #274472;\n  position: relative;\n  overflow-y: auto;\n  display: flex;\n  flex-flow: column;\n  width: 55%;\n  height: 70%;\n  margin: 10% auto;\n  box-shadow: 10px 10px 20px grey;\n  border-radius: 8px;\n  -webkit-border-radius: 8px;\n  -moz-border-radius: 8px;\n  -ms-border-radius: 8px;\n  -o-border-radius: 8px;\n}\n\n.list-container .title {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  min-height: 50px;\n  padding: 0 20px 0 20px;\n  font-size: 1.8rem;\n  color: #e4f4f3;\n  font-family: 'Klee One', cursive;\n  font-weight: 600;\n}\n\n.list-container .add {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  min-height: 50px;\n  border-top: 1px solid gray;\n}\n\n.list-container .add input {\n  background-color: transparent;\n  border: none;\n  margin-left: 20px;\n  width: 80%;\n  min-height: 45px;\n  font-size: 1.3rem;\n  color: #c3e0e5;\n}\n\n.list-container .add #add {\n  margin-right: 20px;\n  font-size: 1.2em;\n  border: none;\n  background-color: transparent;\n  color: #c3e0e5;\n}\n\n.list-container .clear {\n  background-color: #5885af;\n  cursor: pointer;\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  min-height: 50px;\n  text-align: center;\n  border-top: 1px solid gray;\n  color: white;\n}\n\n.list-container .clear:active {\n  color: white;\n  background-color: red;\n}\n\n.completed {\n  text-decoration: line-through;\n  color: gray;\n  font-style: italic;\n}\n\n.d-none {\n  display: none;\n}\n\n.list-container .list {\n  overflow-y: auto;\n  display: flex;\n  flex-flow: column;\n  height: 77%;\n  padding-left: 0;\n  margin: 0;\n}\n\n.list-container .list li {\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n  list-style: none;\n  border: 1px solid gray;\n  border-radius: 8px;\n  -webkit-border-radius: 8px;\n  -moz-border-radius: 8px;\n  -ms-border-radius: 8px;\n  -o-border-radius: 8px;\n}\n\n.list-container .list li .description-container {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 90%;\n  margin: 0;\n  margin-left: 20px;\n  min-height: 70px;\n}\n\n.list-container .list li .description-container p {\n  margin: 10px 5px;\n  width: 90%;\n  font-size: 1.2rem;\n  font-family: 'Klee One', cursive;\n  color: #c3e0e5;\n  word-wrap: break-word;\n}\n\n.list-container .list .description-container .check {\n  appearance: none;\n  width: 1.2rem;\n  height: 1.2rem;\n  border: 2px solid #c3e0e5;\n  margin-right: 10px;\n  background: rgba(255, 241, 241, 0.1);\n}\n\n.list-container .list .description-container .edit-description {\n  min-height: 55px;\n  width: 90%;\n  font-size: 1.2rem;\n  background-color: rgba(255, 255, 255, 0.3);\n  border: none;\n}\n\n.fa-trash {\n  color: red;\n  padding: 10px;\n  font-size: 1.3rem;\n  margin-right: 15px;\n}\n\n.fa-check {\n  font-size: 1.5rem;\n  color: #c3e0e5;\n}\n\n.fa-edit {\n  font-size: 1.3rem;\n  margin-right: 15px;\n  color: #c3e0e5;\n}\n\n.dragging {\n  background-color: #0fabbd;\n}\n\n/* fork me style */\n\n#forkongithub a {\n  background: #274472;\n  color: #c3e0e5;\n  text-decoration: none;\n  font-family: arial, sans-serif;\n  text-align: center;\n  font-weight: bold;\n  padding: 5px 40px;\n  font-size: 1rem;\n  line-height: 2rem;\n  position: relative;\n  transition: 0.5s;\n  -webkit-transition: 0.5s;\n  -moz-transition: 0.5s;\n  -ms-transition: 0.5s;\n  -o-transition: 0.5s;\n}\n\n#forkongithub a:hover {\n  background: #5885af;\n  color: #c3e0e5;\n}\n\n#forkongithub a::before,\n#forkongithub a::after {\n  content: \"\";\n  width: 100%;\n  display: block;\n  position: absolute;\n  top: 1px;\n  left: 0;\n  height: 1px;\n  background: #fff;\n}\n\n#forkongithub a::after {\n  bottom: 1px;\n  top: auto;\n}\n\n@media screen and (min-width: 800px) {\n  #forkongithub {\n    position: fixed;\n    display: block;\n    top: 0;\n    right: 0;\n    width: 200px;\n    overflow: hidden;\n    height: 200px;\n    z-index: 9999;\n  }\n\n  #forkongithub a {\n    width: 200px;\n    position: absolute;\n    top: 60px;\n    right: -60px;\n    transform: rotate(45deg);\n    -webkit-transform: rotate(45deg);\n    -ms-transform: rotate(45deg);\n    -moz-transform: rotate(45deg);\n    -o-transform: rotate(45deg);\n    box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.8);\n  }\n}\n"],sourceRoot:""}]);const l=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var l=0;l<t.length;l++){var s=[].concat(t[l]);o&&r[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),e.push(s))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,r=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var o,r,i=[],a=!0,l=!1;try{for(n=n.call(t);!(a=(o=n.next()).done)&&(i.push(o.value),!e||i.length!==e);a=!0);}catch(t){l=!0,r=t}finally{try{a||null==n.return||n.return()}finally{if(l)throw r}}return i}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],a=r[3];if(!a)return i;if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),c="/*# ".concat(s," */"),d=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(d).concat([c]).join("\n")}return[i].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var i={},a=[],l=0;l<t.length;l++){var s=t[l],c=o.base?s[0]+o.base:s[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var p=n(u),h={css:s[1],media:s[2],sourceMap:s[3]};-1!==p?(e[p].references++,e[p].updater(h)):e.push({identifier:u,updater:r(h,o),references:1}),a.push(u)}return a}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var l=n(i[a]);e[l].references--}for(var s=o(t,r),c=0;c<i.length;c++){var d=n(i[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=s}}},569:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o=n.css,r=n.media,i=n.sourceMap;r?t.setAttribute("media",r):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return t[o](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),o=n(795),r=n.n(o),i=n(569),a=n.n(i),l=n(565),s=n.n(l),c=n(216),d=n.n(c),u=n(589),p=n.n(u),h=n(965),f={};function g(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function A(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?g(Object(n),!0).forEach((function(e){v(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function m(t){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function v(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function b(){return(b=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t}).apply(this,arguments)}function E(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}function C(t){if("undefined"!=typeof window&&window.navigator)return!!navigator.userAgent.match(t)}f.styleTagTransform=p(),f.setAttributes=s(),f.insert=a().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=d(),e()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;var B=C(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),y=C(/Edge/i),w=C(/firefox/i),x=C(/safari/i)&&!C(/chrome/i)&&!C(/android/i),S=C(/iP(ad|od|hone)/i),k=C(/chrome/i)&&C(/android/i),D={capture:!1,passive:!1};function _(t,e,n){t.addEventListener(e,n,!B&&D)}function T(t,e,n){t.removeEventListener(e,n,!B&&D)}function I(t,e){if(e){if(">"===e[0]&&(e=e.substring(1)),t)try{if(t.matches)return t.matches(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e)}catch(t){return!1}return!1}}function O(t){return t.host&&t!==document&&t.host.nodeType?t.host:t.parentNode}function N(t,e,n,o){if(t){n=n||document;do{if(null!=e&&(">"===e[0]?t.parentNode===n&&I(t,e):I(t,e))||o&&t===n)return t;if(t===n)break}while(t=O(t))}return null}var M,P=/\s+/g;function Y(t,e,n){if(t&&e)if(t.classList)t.classList[n?"add":"remove"](e);else{var o=(" "+t.className+" ").replace(P," ").replace(" "+e+" "," ");t.className=(o+(n?" "+e:"")).replace(P," ")}}function j(t,e,n){var o=t&&t.style;if(o){if(void 0===n)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(t,""):t.currentStyle&&(n=t.currentStyle),void 0===e?n:n[e];e in o||-1!==e.indexOf("webkit")||(e="-webkit-"+e),o[e]=n+("string"==typeof n?"":"px")}}function X(t,e){var n="";if("string"==typeof t)n=t;else do{var o=j(t,"transform");o&&"none"!==o&&(n=o+" "+n)}while(!e&&(t=t.parentNode));var r=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return r&&new r(n)}function R(t,e,n){if(t){var o=t.getElementsByTagName(e),r=0,i=o.length;if(n)for(;r<i;r++)n(o[r],r);return o}return[]}function z(){return document.scrollingElement||document.documentElement}function L(t,e,n,o,r){if(t.getBoundingClientRect||t===window){var i,a,l,s,c,d,u;if(t!==window&&t.parentNode&&t!==z()?(a=(i=t.getBoundingClientRect()).top,l=i.left,s=i.bottom,c=i.right,d=i.height,u=i.width):(a=0,l=0,s=window.innerHeight,c=window.innerWidth,d=window.innerHeight,u=window.innerWidth),(e||n)&&t!==window&&(r=r||t.parentNode,!B))do{if(r&&r.getBoundingClientRect&&("none"!==j(r,"transform")||n&&"static"!==j(r,"position"))){var p=r.getBoundingClientRect();a-=p.top+parseInt(j(r,"border-top-width")),l-=p.left+parseInt(j(r,"border-left-width")),s=a+i.height,c=l+i.width;break}}while(r=r.parentNode);if(o&&t!==window){var h=X(r||t),f=h&&h.a,g=h&&h.d;h&&(s=(a/=g)+(d/=g),c=(l/=f)+(u/=f))}return{top:a,left:l,bottom:s,right:c,width:u,height:d}}}function W(t,e,n){for(var o=Z(t,!0),r=L(t)[e];o;){var i=L(o)[n];if(!("top"===n||"left"===n?r>=i:r<=i))return o;if(o===z())break;o=Z(o,!1)}return!1}function F(t,e,n,o){for(var r=0,i=0,a=t.children;i<a.length;){if("none"!==a[i].style.display&&a[i]!==Gt.ghost&&(o||a[i]!==Gt.dragged)&&N(a[i],n.draggable,t,!1)){if(r===e)return a[i];r++}i++}return null}function U(t,e){for(var n=t.lastElementChild;n&&(n===Gt.ghost||"none"===j(n,"display")||e&&!I(n,e));)n=n.previousElementSibling;return n||null}function H(t,e){var n=0;if(!t||!t.parentNode)return-1;for(;t=t.previousElementSibling;)"TEMPLATE"===t.nodeName.toUpperCase()||t===Gt.clone||e&&!I(t,e)||n++;return n}function q(t){var e=0,n=0,o=z();if(t)do{var r=X(t),i=r.a,a=r.d;e+=t.scrollLeft*i,n+=t.scrollTop*a}while(t!==o&&(t=t.parentNode));return[e,n]}function Z(t,e){if(!t||!t.getBoundingClientRect)return z();var n=t,o=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var r=j(n);if(n.clientWidth<n.scrollWidth&&("auto"==r.overflowX||"scroll"==r.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==r.overflowY||"scroll"==r.overflowY)){if(!n.getBoundingClientRect||n===document.body)return z();if(o||e)return n;o=!0}}}while(n=n.parentNode);return z()}function V(t,e){return Math.round(t.top)===Math.round(e.top)&&Math.round(t.left)===Math.round(e.left)&&Math.round(t.height)===Math.round(e.height)&&Math.round(t.width)===Math.round(e.width)}function G(t,e){return function(){if(!M){var n=arguments,o=this;1===n.length?t.call(o,n[0]):t.apply(o,n),M=setTimeout((function(){M=void 0}),e)}}}function K(t,e,n){t.scrollLeft+=e,t.scrollTop+=n}function Q(t){var e=window.Polymer,n=window.jQuery||window.Zepto;return e&&e.dom?e.dom(t).cloneNode(!0):n?n(t).clone(!0)[0]:t.cloneNode(!0)}var J="Sortable"+(new Date).getTime();var $=[],tt={initializeByDefault:!0},et={mount:function(t){for(var e in tt)tt.hasOwnProperty(e)&&!(e in t)&&(t[e]=tt[e]);$.forEach((function(e){if(e.pluginName===t.pluginName)throw"Sortable: Cannot mount plugin ".concat(t.pluginName," more than once")})),$.push(t)},pluginEvent:function(t,e,n){var o=this;this.eventCanceled=!1,n.cancel=function(){o.eventCanceled=!0};var r=t+"Global";$.forEach((function(o){e[o.pluginName]&&(e[o.pluginName][r]&&e[o.pluginName][r](A({sortable:e},n)),e.options[o.pluginName]&&e[o.pluginName][t]&&e[o.pluginName][t](A({sortable:e},n)))}))},initializePlugins:function(t,e,n,o){for(var r in $.forEach((function(o){var r=o.pluginName;if(t.options[r]||o.initializeByDefault){var i=new o(t,e,t.options);i.sortable=t,i.options=t.options,t[r]=i,b(n,i.defaults)}})),t.options)if(t.options.hasOwnProperty(r)){var i=this.modifyOption(t,r,t.options[r]);void 0!==i&&(t.options[r]=i)}},getEventProperties:function(t,e){var n={};return $.forEach((function(o){"function"==typeof o.eventProperties&&b(n,o.eventProperties.call(e[o.pluginName],t))})),n},modifyOption:function(t,e,n){var o;return $.forEach((function(r){t[r.pluginName]&&r.optionListeners&&"function"==typeof r.optionListeners[e]&&(o=r.optionListeners[e].call(t[r.pluginName],n))})),o}};var nt=["evt"],ot=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=n.evt,r=E(n,nt);et.pluginEvent.bind(Gt)(t,e,A({dragEl:it,parentEl:at,ghostEl:lt,rootEl:st,nextEl:ct,lastDownEl:dt,cloneEl:ut,cloneHidden:pt,dragStarted:xt,putSortable:vt,activeSortable:Gt.active,originalEvent:o,oldIndex:ht,oldDraggableIndex:gt,newIndex:ft,newDraggableIndex:At,hideGhostForTarget:Ht,unhideGhostForTarget:qt,cloneNowHidden:function(){pt=!0},cloneNowShown:function(){pt=!1},dispatchSortableEvent:function(t){rt({sortable:e,name:t,originalEvent:o})}},r))};function rt(t){!function(t){var e=t.sortable,n=t.rootEl,o=t.name,r=t.targetEl,i=t.cloneEl,a=t.toEl,l=t.fromEl,s=t.oldIndex,c=t.newIndex,d=t.oldDraggableIndex,u=t.newDraggableIndex,p=t.originalEvent,h=t.putSortable,f=t.extraEventProperties;if(e=e||n&&n[J]){var g,m=e.options,v="on"+o.charAt(0).toUpperCase()+o.substr(1);!window.CustomEvent||B||y?(g=document.createEvent("Event")).initEvent(o,!0,!0):g=new CustomEvent(o,{bubbles:!0,cancelable:!0}),g.to=a||n,g.from=l||n,g.item=r||n,g.clone=i,g.oldIndex=s,g.newIndex=c,g.oldDraggableIndex=d,g.newDraggableIndex=u,g.originalEvent=p,g.pullMode=h?h.lastPutMode:void 0;var b=A(A({},f),et.getEventProperties(o,e));for(var E in b)g[E]=b[E];n&&n.dispatchEvent(g),m[v]&&m[v].call(e,g)}}(A({putSortable:vt,cloneEl:ut,targetEl:it,rootEl:st,oldIndex:ht,oldDraggableIndex:gt,newIndex:ft,newDraggableIndex:At},t))}var it,at,lt,st,ct,dt,ut,pt,ht,ft,gt,At,mt,vt,bt,Et,Ct,Bt,yt,wt,xt,St,kt,Dt,_t,Tt=!1,It=!1,Ot=[],Nt=!1,Mt=!1,Pt=[],Yt=!1,jt=[],Xt="undefined"!=typeof document,Rt=S,zt=y||B?"cssFloat":"float",Lt=Xt&&!k&&!S&&"draggable"in document.createElement("div"),Wt=function(){if(Xt){if(B)return!1;var t=document.createElement("x");return t.style.cssText="pointer-events:auto","auto"===t.style.pointerEvents}}(),Ft=function(t,e){var n=j(t),o=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),r=F(t,0,e),i=F(t,1,e),a=r&&j(r),l=i&&j(i),s=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+L(r).width,c=l&&parseInt(l.marginLeft)+parseInt(l.marginRight)+L(i).width;if("flex"===n.display)return"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal";if("grid"===n.display)return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(r&&a.float&&"none"!==a.float){var d="left"===a.float?"left":"right";return!i||"both"!==l.clear&&l.clear!==d?"horizontal":"vertical"}return r&&("block"===a.display||"flex"===a.display||"table"===a.display||"grid"===a.display||s>=o&&"none"===n[zt]||i&&"none"===n[zt]&&s+c>o)?"vertical":"horizontal"},Ut=function(t){function e(t,n){return function(o,r,i,a){var l=o.options.group.name&&r.options.group.name&&o.options.group.name===r.options.group.name;if(null==t&&(n||l))return!0;if(null==t||!1===t)return!1;if(n&&"clone"===t)return t;if("function"==typeof t)return e(t(o,r,i,a),n)(o,r,i,a);var s=(n?o:r).options.group.name;return!0===t||"string"==typeof t&&t===s||t.join&&t.indexOf(s)>-1}}var n={},o=t.group;o&&"object"==m(o)||(o={name:o}),n.name=o.name,n.checkPull=e(o.pull,!0),n.checkPut=e(o.put),n.revertClone=o.revertClone,t.group=n},Ht=function(){!Wt&&lt&&j(lt,"display","none")},qt=function(){!Wt&&lt&&j(lt,"display","")};Xt&&document.addEventListener("click",(function(t){if(It)return t.preventDefault(),t.stopPropagation&&t.stopPropagation(),t.stopImmediatePropagation&&t.stopImmediatePropagation(),It=!1,!1}),!0);var Zt=function(t){if(it){t=t.touches?t.touches[0]:t;var e=(r=t.clientX,i=t.clientY,Ot.some((function(t){var e=t[J].options.emptyInsertThreshold;if(e&&!U(t)){var n=L(t),o=r>=n.left-e&&r<=n.right+e,l=i>=n.top-e&&i<=n.bottom+e;return o&&l?a=t:void 0}})),a);if(e){var n={};for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o]);n.target=n.rootEl=e,n.preventDefault=void 0,n.stopPropagation=void 0,e[J]._onDragOver(n)}}var r,i,a},Vt=function(t){it&&it.parentNode[J]._isOutsideThisEl(t.target)};function Gt(t,e){if(!t||!t.nodeType||1!==t.nodeType)throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(t));this.el=t,this.options=e=b({},e),t[J]=this;var n,o,r={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(t.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Ft(t,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(t,e){t.setData("Text",e.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==Gt.supportPointer&&"PointerEvent"in window&&!x,emptyInsertThreshold:5};for(var i in et.initializePlugins(this,t,r),r)!(i in e)&&(e[i]=r[i]);for(var a in Ut(e),this)"_"===a.charAt(0)&&"function"==typeof this[a]&&(this[a]=this[a].bind(this));this.nativeDraggable=!e.forceFallback&&Lt,this.nativeDraggable&&(this.options.touchStartThreshold=1),e.supportPointer?_(t,"pointerdown",this._onTapStart):(_(t,"mousedown",this._onTapStart),_(t,"touchstart",this._onTapStart)),this.nativeDraggable&&(_(t,"dragover",this),_(t,"dragenter",this)),Ot.push(this.el),e.store&&e.store.get&&this.sort(e.store.get(this)||[]),b(this,(o=[],{captureAnimationState:function(){o=[],this.options.animation&&[].slice.call(this.el.children).forEach((function(t){if("none"!==j(t,"display")&&t!==Gt.ghost){o.push({target:t,rect:L(t)});var e=A({},o[o.length-1].rect);if(t.thisAnimationDuration){var n=X(t,!0);n&&(e.top-=n.f,e.left-=n.e)}t.fromRect=e}}))},addAnimationState:function(t){o.push(t)},removeAnimationState:function(t){o.splice(function(t,e){for(var n in t)if(t.hasOwnProperty(n))for(var o in e)if(e.hasOwnProperty(o)&&e[o]===t[n][o])return Number(n);return-1}(o,{target:t}),1)},animateAll:function(t){var e=this;if(!this.options.animation)return clearTimeout(n),void("function"==typeof t&&t());var r=!1,i=0;o.forEach((function(t){var n=0,o=t.target,a=o.fromRect,l=L(o),s=o.prevFromRect,c=o.prevToRect,d=t.rect,u=X(o,!0);u&&(l.top-=u.f,l.left-=u.e),o.toRect=l,o.thisAnimationDuration&&V(s,l)&&!V(a,l)&&(d.top-l.top)/(d.left-l.left)==(a.top-l.top)/(a.left-l.left)&&(n=function(t,e,n,o){return Math.sqrt(Math.pow(e.top-t.top,2)+Math.pow(e.left-t.left,2))/Math.sqrt(Math.pow(e.top-n.top,2)+Math.pow(e.left-n.left,2))*o.animation}(d,s,c,e.options)),V(l,a)||(o.prevFromRect=a,o.prevToRect=l,n||(n=e.options.animation),e.animate(o,d,l,n)),n&&(r=!0,i=Math.max(i,n),clearTimeout(o.animationResetTimer),o.animationResetTimer=setTimeout((function(){o.animationTime=0,o.prevFromRect=null,o.fromRect=null,o.prevToRect=null,o.thisAnimationDuration=null}),n),o.thisAnimationDuration=n)})),clearTimeout(n),r?n=setTimeout((function(){"function"==typeof t&&t()}),i):"function"==typeof t&&t(),o=[]},animate:function(t,e,n,o){if(o){j(t,"transition",""),j(t,"transform","");var r=X(this.el),i=r&&r.a,a=r&&r.d,l=(e.left-n.left)/(i||1),s=(e.top-n.top)/(a||1);t.animatingX=!!l,t.animatingY=!!s,j(t,"transform","translate3d("+l+"px,"+s+"px,0)"),this.forRepaintDummy=function(t){return t.offsetWidth}(t),j(t,"transition","transform "+o+"ms"+(this.options.easing?" "+this.options.easing:"")),j(t,"transform","translate3d(0,0,0)"),"number"==typeof t.animated&&clearTimeout(t.animated),t.animated=setTimeout((function(){j(t,"transition",""),j(t,"transform",""),t.animated=!1,t.animatingX=!1,t.animatingY=!1}),o)}}}))}function Kt(t,e,n,o,r,i,a,l){var s,c,d=t[J],u=d.options.onMove;return!window.CustomEvent||B||y?(s=document.createEvent("Event")).initEvent("move",!0,!0):s=new CustomEvent("move",{bubbles:!0,cancelable:!0}),s.to=e,s.from=t,s.dragged=n,s.draggedRect=o,s.related=r||e,s.relatedRect=i||L(e),s.willInsertAfter=l,s.originalEvent=a,t.dispatchEvent(s),u&&(c=u.call(d,s,a)),c}function Qt(t){t.draggable=!1}function Jt(){Yt=!1}function $t(t){for(var e=t.tagName+t.className+t.src+t.href+t.textContent,n=e.length,o=0;n--;)o+=e.charCodeAt(n);return o.toString(36)}function te(t){return setTimeout(t,0)}function ee(t){return clearTimeout(t)}Gt.prototype={constructor:Gt,_isOutsideThisEl:function(t){this.el.contains(t)||t===this.el||(St=null)},_getDirection:function(t,e){return"function"==typeof this.options.direction?this.options.direction.call(this,t,e,it):this.options.direction},_onTapStart:function(t){if(t.cancelable){var e=this,n=this.el,o=this.options,r=o.preventOnFilter,i=t.type,a=t.touches&&t.touches[0]||t.pointerType&&"touch"===t.pointerType&&t,l=(a||t).target,s=t.target.shadowRoot&&(t.path&&t.path[0]||t.composedPath&&t.composedPath()[0])||l,c=o.filter;if(function(t){jt.length=0;for(var e=t.getElementsByTagName("input"),n=e.length;n--;){var o=e[n];o.checked&&jt.push(o)}}(n),!it&&!(/mousedown|pointerdown/.test(i)&&0!==t.button||o.disabled)&&!s.isContentEditable&&(this.nativeDraggable||!x||!l||"SELECT"!==l.tagName.toUpperCase())&&!((l=N(l,o.draggable,n,!1))&&l.animated||dt===l)){if(ht=H(l),gt=H(l,o.draggable),"function"==typeof c){if(c.call(this,t,l,this))return rt({sortable:e,rootEl:s,name:"filter",targetEl:l,toEl:n,fromEl:n}),ot("filter",e,{evt:t}),void(r&&t.cancelable&&t.preventDefault())}else if(c&&(c=c.split(",").some((function(o){if(o=N(s,o.trim(),n,!1))return rt({sortable:e,rootEl:o,name:"filter",targetEl:l,fromEl:n,toEl:n}),ot("filter",e,{evt:t}),!0}))))return void(r&&t.cancelable&&t.preventDefault());o.handle&&!N(s,o.handle,n,!1)||this._prepareDragStart(t,a,l)}}},_prepareDragStart:function(t,e,n){var o,r=this,i=r.el,a=r.options,l=i.ownerDocument;if(n&&!it&&n.parentNode===i){var s=L(n);if(st=i,at=(it=n).parentNode,ct=it.nextSibling,dt=n,mt=a.group,Gt.dragged=it,bt={target:it,clientX:(e||t).clientX,clientY:(e||t).clientY},yt=bt.clientX-s.left,wt=bt.clientY-s.top,this._lastX=(e||t).clientX,this._lastY=(e||t).clientY,it.style["will-change"]="all",o=function(){ot("delayEnded",r,{evt:t}),Gt.eventCanceled?r._onDrop():(r._disableDelayedDragEvents(),!w&&r.nativeDraggable&&(it.draggable=!0),r._triggerDragStart(t,e),rt({sortable:r,name:"choose",originalEvent:t}),Y(it,a.chosenClass,!0))},a.ignore.split(",").forEach((function(t){R(it,t.trim(),Qt)})),_(l,"dragover",Zt),_(l,"mousemove",Zt),_(l,"touchmove",Zt),_(l,"mouseup",r._onDrop),_(l,"touchend",r._onDrop),_(l,"touchcancel",r._onDrop),w&&this.nativeDraggable&&(this.options.touchStartThreshold=4,it.draggable=!0),ot("delayStart",this,{evt:t}),!a.delay||a.delayOnTouchOnly&&!e||this.nativeDraggable&&(y||B))o();else{if(Gt.eventCanceled)return void this._onDrop();_(l,"mouseup",r._disableDelayedDrag),_(l,"touchend",r._disableDelayedDrag),_(l,"touchcancel",r._disableDelayedDrag),_(l,"mousemove",r._delayedDragTouchMoveHandler),_(l,"touchmove",r._delayedDragTouchMoveHandler),a.supportPointer&&_(l,"pointermove",r._delayedDragTouchMoveHandler),r._dragStartTimer=setTimeout(o,a.delay)}}},_delayedDragTouchMoveHandler:function(t){var e=t.touches?t.touches[0]:t;Math.max(Math.abs(e.clientX-this._lastX),Math.abs(e.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){it&&Qt(it),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var t=this.el.ownerDocument;T(t,"mouseup",this._disableDelayedDrag),T(t,"touchend",this._disableDelayedDrag),T(t,"touchcancel",this._disableDelayedDrag),T(t,"mousemove",this._delayedDragTouchMoveHandler),T(t,"touchmove",this._delayedDragTouchMoveHandler),T(t,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(t,e){e=e||"touch"==t.pointerType&&t,!this.nativeDraggable||e?this.options.supportPointer?_(document,"pointermove",this._onTouchMove):_(document,e?"touchmove":"mousemove",this._onTouchMove):(_(it,"dragend",this),_(st,"dragstart",this._onDragStart));try{document.selection?te((function(){document.selection.empty()})):window.getSelection().removeAllRanges()}catch(t){}},_dragStarted:function(t,e){if(Tt=!1,st&&it){ot("dragStarted",this,{evt:e}),this.nativeDraggable&&_(document,"dragover",Vt);var n=this.options;!t&&Y(it,n.dragClass,!1),Y(it,n.ghostClass,!0),Gt.active=this,t&&this._appendGhost(),rt({sortable:this,name:"start",originalEvent:e})}else this._nulling()},_emulateDragOver:function(){if(Et){this._lastX=Et.clientX,this._lastY=Et.clientY,Ht();for(var t=document.elementFromPoint(Et.clientX,Et.clientY),e=t;t&&t.shadowRoot&&(t=t.shadowRoot.elementFromPoint(Et.clientX,Et.clientY))!==e;)e=t;if(it.parentNode[J]._isOutsideThisEl(t),e)do{if(e[J]&&e[J]._onDragOver({clientX:Et.clientX,clientY:Et.clientY,target:t,rootEl:e})&&!this.options.dragoverBubble)break;t=e}while(e=e.parentNode);qt()}},_onTouchMove:function(t){if(bt){var e=this.options,n=e.fallbackTolerance,o=e.fallbackOffset,r=t.touches?t.touches[0]:t,i=lt&&X(lt,!0),a=lt&&i&&i.a,l=lt&&i&&i.d,s=Rt&&_t&&q(_t),c=(r.clientX-bt.clientX+o.x)/(a||1)+(s?s[0]-Pt[0]:0)/(a||1),d=(r.clientY-bt.clientY+o.y)/(l||1)+(s?s[1]-Pt[1]:0)/(l||1);if(!Gt.active&&!Tt){if(n&&Math.max(Math.abs(r.clientX-this._lastX),Math.abs(r.clientY-this._lastY))<n)return;this._onDragStart(t,!0)}if(lt){i?(i.e+=c-(Ct||0),i.f+=d-(Bt||0)):i={a:1,b:0,c:0,d:1,e:c,f:d};var u="matrix(".concat(i.a,",").concat(i.b,",").concat(i.c,",").concat(i.d,",").concat(i.e,",").concat(i.f,")");j(lt,"webkitTransform",u),j(lt,"mozTransform",u),j(lt,"msTransform",u),j(lt,"transform",u),Ct=c,Bt=d,Et=r}t.cancelable&&t.preventDefault()}},_appendGhost:function(){if(!lt){var t=this.options.fallbackOnBody?document.body:st,e=L(it,!0,Rt,!0,t),n=this.options;if(Rt){for(_t=t;"static"===j(_t,"position")&&"none"===j(_t,"transform")&&_t!==document;)_t=_t.parentNode;_t!==document.body&&_t!==document.documentElement?(_t===document&&(_t=z()),e.top+=_t.scrollTop,e.left+=_t.scrollLeft):_t=z(),Pt=q(_t)}Y(lt=it.cloneNode(!0),n.ghostClass,!1),Y(lt,n.fallbackClass,!0),Y(lt,n.dragClass,!0),j(lt,"transition",""),j(lt,"transform",""),j(lt,"box-sizing","border-box"),j(lt,"margin",0),j(lt,"top",e.top),j(lt,"left",e.left),j(lt,"width",e.width),j(lt,"height",e.height),j(lt,"opacity","0.8"),j(lt,"position",Rt?"absolute":"fixed"),j(lt,"zIndex","100000"),j(lt,"pointerEvents","none"),Gt.ghost=lt,t.appendChild(lt),j(lt,"transform-origin",yt/parseInt(lt.style.width)*100+"% "+wt/parseInt(lt.style.height)*100+"%")}},_onDragStart:function(t,e){var n=this,o=t.dataTransfer,r=n.options;ot("dragStart",this,{evt:t}),Gt.eventCanceled?this._onDrop():(ot("setupClone",this),Gt.eventCanceled||((ut=Q(it)).draggable=!1,ut.style["will-change"]="",this._hideClone(),Y(ut,this.options.chosenClass,!1),Gt.clone=ut),n.cloneId=te((function(){ot("clone",n),Gt.eventCanceled||(n.options.removeCloneOnHide||st.insertBefore(ut,it),n._hideClone(),rt({sortable:n,name:"clone"}))})),!e&&Y(it,r.dragClass,!0),e?(It=!0,n._loopId=setInterval(n._emulateDragOver,50)):(T(document,"mouseup",n._onDrop),T(document,"touchend",n._onDrop),T(document,"touchcancel",n._onDrop),o&&(o.effectAllowed="move",r.setData&&r.setData.call(n,o,it)),_(document,"drop",n),j(it,"transform","translateZ(0)")),Tt=!0,n._dragStartId=te(n._dragStarted.bind(n,e,t)),_(document,"selectstart",n),xt=!0,x&&j(document.body,"user-select","none"))},_onDragOver:function(t){var e,n,o,r,i=this.el,a=t.target,l=this.options,s=l.group,c=Gt.active,d=mt===s,u=l.sort,p=vt||c,h=this,f=!1;if(!Yt){if(void 0!==t.preventDefault&&t.cancelable&&t.preventDefault(),a=N(a,l.draggable,i,!0),T("dragOver"),Gt.eventCanceled)return f;if(it.contains(t.target)||a.animated&&a.animatingX&&a.animatingY||h._ignoreWhileAnimating===a)return O(!1);if(It=!1,c&&!l.disabled&&(d?u||(o=at!==st):vt===this||(this.lastPutMode=mt.checkPull(this,c,it,t))&&s.checkPut(this,c,it,t))){if(r="vertical"===this._getDirection(t,a),e=L(it),T("dragOverValid"),Gt.eventCanceled)return f;if(o)return at=st,I(),this._hideClone(),T("revert"),Gt.eventCanceled||(ct?st.insertBefore(it,ct):st.appendChild(it)),O(!0);var g=U(i,l.draggable);if(!g||function(t,e,n){var o=L(U(n.el,n.options.draggable));return e?t.clientX>o.right+10||t.clientX<=o.right&&t.clientY>o.bottom&&t.clientX>=o.left:t.clientX>o.right&&t.clientY>o.top||t.clientX<=o.right&&t.clientY>o.bottom+10}(t,r,this)&&!g.animated){if(g===it)return O(!1);if(g&&i===t.target&&(a=g),a&&(n=L(a)),!1!==Kt(st,i,it,e,a,n,t,!!a))return I(),i.appendChild(it),at=i,M(),O(!0)}else if(g&&function(t,e,n){var o=L(F(n.el,0,n.options,!0));return e?t.clientX<o.left-10||t.clientY<o.top&&t.clientX<o.right:t.clientY<o.top-10||t.clientY<o.bottom&&t.clientX<o.left}(t,r,this)){var m=F(i,0,l,!0);if(m===it)return O(!1);if(n=L(a=m),!1!==Kt(st,i,it,e,a,n,t,!1))return I(),i.insertBefore(it,m),at=i,M(),O(!0)}else if(a.parentNode===i){n=L(a);var v,b,E,C=it.parentNode!==i,B=!function(t,e,n){var o=n?t.left:t.top,r=n?t.right:t.bottom,i=n?t.width:t.height,a=n?e.left:e.top,l=n?e.right:e.bottom,s=n?e.width:e.height;return o===a||r===l||o+i/2===a+s/2}(it.animated&&it.toRect||e,a.animated&&a.toRect||n,r),y=r?"top":"left",w=W(a,"top","top")||W(it,"top","top"),x=w?w.scrollTop:void 0;if(St!==a&&(b=n[y],Nt=!1,Mt=!B&&l.invertSwap||C),0!==(v=function(t,e,n,o,r,i,a,l){var s=o?t.clientY:t.clientX,c=o?n.height:n.width,d=o?n.top:n.left,u=o?n.bottom:n.right,p=!1;if(!a)if(l&&Dt<c*r){if(!Nt&&(1===kt?s>d+c*i/2:s<u-c*i/2)&&(Nt=!0),Nt)p=!0;else if(1===kt?s<d+Dt:s>u-Dt)return-kt}else if(s>d+c*(1-r)/2&&s<u-c*(1-r)/2)return function(t){return H(it)<H(t)?1:-1}(e);return(p=p||a)&&(s<d+c*i/2||s>u-c*i/2)?s>d+c/2?1:-1:0}(t,a,n,r,B?1:l.swapThreshold,null==l.invertedSwapThreshold?l.swapThreshold:l.invertedSwapThreshold,Mt,St===a))){var S=H(it);do{S-=v,E=at.children[S]}while(E&&("none"===j(E,"display")||E===lt))}if(0===v||E===a)return O(!1);St=a,kt=v;var k=a.nextElementSibling,D=!1,_=Kt(st,i,it,e,a,n,t,D=1===v);if(!1!==_)return 1!==_&&-1!==_||(D=1===_),Yt=!0,setTimeout(Jt,30),I(),D&&!k?i.appendChild(it):a.parentNode.insertBefore(it,D?k:a),w&&K(w,0,x-w.scrollTop),at=it.parentNode,void 0===b||Mt||(Dt=Math.abs(b-L(a)[y])),M(),O(!0)}if(i.contains(it))return O(!1)}return!1}function T(l,s){ot(l,h,A({evt:t,isOwner:d,axis:r?"vertical":"horizontal",revert:o,dragRect:e,targetRect:n,canSort:u,fromSortable:p,target:a,completed:O,onMove:function(n,o){return Kt(st,i,it,e,n,L(n),t,o)},changed:M},s))}function I(){T("dragOverAnimationCapture"),h.captureAnimationState(),h!==p&&p.captureAnimationState()}function O(e){return T("dragOverCompleted",{insertion:e}),e&&(d?c._hideClone():c._showClone(h),h!==p&&(Y(it,vt?vt.options.ghostClass:c.options.ghostClass,!1),Y(it,l.ghostClass,!0)),vt!==h&&h!==Gt.active?vt=h:h===Gt.active&&vt&&(vt=null),p===h&&(h._ignoreWhileAnimating=a),h.animateAll((function(){T("dragOverAnimationComplete"),h._ignoreWhileAnimating=null})),h!==p&&(p.animateAll(),p._ignoreWhileAnimating=null)),(a===it&&!it.animated||a===i&&!a.animated)&&(St=null),l.dragoverBubble||t.rootEl||a===document||(it.parentNode[J]._isOutsideThisEl(t.target),!e&&Zt(t)),!l.dragoverBubble&&t.stopPropagation&&t.stopPropagation(),f=!0}function M(){ft=H(it),At=H(it,l.draggable),rt({sortable:h,name:"change",toEl:i,newIndex:ft,newDraggableIndex:At,originalEvent:t})}},_ignoreWhileAnimating:null,_offMoveEvents:function(){T(document,"mousemove",this._onTouchMove),T(document,"touchmove",this._onTouchMove),T(document,"pointermove",this._onTouchMove),T(document,"dragover",Zt),T(document,"mousemove",Zt),T(document,"touchmove",Zt)},_offUpEvents:function(){var t=this.el.ownerDocument;T(t,"mouseup",this._onDrop),T(t,"touchend",this._onDrop),T(t,"pointerup",this._onDrop),T(t,"touchcancel",this._onDrop),T(document,"selectstart",this)},_onDrop:function(t){var e=this.el,n=this.options;ft=H(it),At=H(it,n.draggable),ot("drop",this,{evt:t}),at=it&&it.parentNode,ft=H(it),At=H(it,n.draggable),Gt.eventCanceled||(Tt=!1,Mt=!1,Nt=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),ee(this.cloneId),ee(this._dragStartId),this.nativeDraggable&&(T(document,"drop",this),T(e,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),x&&j(document.body,"user-select",""),j(it,"transform",""),t&&(xt&&(t.cancelable&&t.preventDefault(),!n.dropBubble&&t.stopPropagation()),lt&&lt.parentNode&&lt.parentNode.removeChild(lt),(st===at||vt&&"clone"!==vt.lastPutMode)&&ut&&ut.parentNode&&ut.parentNode.removeChild(ut),it&&(this.nativeDraggable&&T(it,"dragend",this),Qt(it),it.style["will-change"]="",xt&&!Tt&&Y(it,vt?vt.options.ghostClass:this.options.ghostClass,!1),Y(it,this.options.chosenClass,!1),rt({sortable:this,name:"unchoose",toEl:at,newIndex:null,newDraggableIndex:null,originalEvent:t}),st!==at?(ft>=0&&(rt({rootEl:at,name:"add",toEl:at,fromEl:st,originalEvent:t}),rt({sortable:this,name:"remove",toEl:at,originalEvent:t}),rt({rootEl:at,name:"sort",toEl:at,fromEl:st,originalEvent:t}),rt({sortable:this,name:"sort",toEl:at,originalEvent:t})),vt&&vt.save()):ft!==ht&&ft>=0&&(rt({sortable:this,name:"update",toEl:at,originalEvent:t}),rt({sortable:this,name:"sort",toEl:at,originalEvent:t})),Gt.active&&(null!=ft&&-1!==ft||(ft=ht,At=gt),rt({sortable:this,name:"end",toEl:at,originalEvent:t}),this.save())))),this._nulling()},_nulling:function(){ot("nulling",this),st=it=at=lt=ct=ut=dt=pt=bt=Et=xt=ft=At=ht=gt=St=kt=vt=mt=Gt.dragged=Gt.ghost=Gt.clone=Gt.active=null,jt.forEach((function(t){t.checked=!0})),jt.length=Ct=Bt=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragenter":case"dragover":it&&(this._onDragOver(t),function(t){t.dataTransfer&&(t.dataTransfer.dropEffect="move"),t.cancelable&&t.preventDefault()}(t));break;case"selectstart":t.preventDefault()}},toArray:function(){for(var t,e=[],n=this.el.children,o=0,r=n.length,i=this.options;o<r;o++)N(t=n[o],i.draggable,this.el,!1)&&e.push(t.getAttribute(i.dataIdAttr)||$t(t));return e},sort:function(t,e){var n={},o=this.el;this.toArray().forEach((function(t,e){var r=o.children[e];N(r,this.options.draggable,o,!1)&&(n[t]=r)}),this),e&&this.captureAnimationState(),t.forEach((function(t){n[t]&&(o.removeChild(n[t]),o.appendChild(n[t]))})),e&&this.animateAll()},save:function(){var t=this.options.store;t&&t.set&&t.set(this)},closest:function(t,e){return N(t,e||this.options.draggable,this.el,!1)},option:function(t,e){var n=this.options;if(void 0===e)return n[t];var o=et.modifyOption(this,t,e);n[t]=void 0!==o?o:e,"group"===t&&Ut(n)},destroy:function(){ot("destroy",this);var t=this.el;t[J]=null,T(t,"mousedown",this._onTapStart),T(t,"touchstart",this._onTapStart),T(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(T(t,"dragover",this),T(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),(function(t){t.removeAttribute("draggable")})),this._onDrop(),this._disableDelayedDragEvents(),Ot.splice(Ot.indexOf(this.el),1),this.el=t=null},_hideClone:function(){if(!pt){if(ot("hideClone",this),Gt.eventCanceled)return;j(ut,"display","none"),this.options.removeCloneOnHide&&ut.parentNode&&ut.parentNode.removeChild(ut),pt=!0}},_showClone:function(t){if("clone"===t.lastPutMode){if(pt){if(ot("showClone",this),Gt.eventCanceled)return;it.parentNode!=st||this.options.group.revertClone?ct?st.insertBefore(ut,ct):st.appendChild(ut):st.insertBefore(ut,it),this.options.group.revertClone&&this.animate(it,ut),j(ut,"display",""),pt=!1}}else this._hideClone()}},Xt&&_(document,"touchmove",(function(t){(Gt.active||Tt)&&t.cancelable&&t.preventDefault()})),Gt.utils={on:_,off:T,css:j,find:R,is:function(t,e){return!!N(t,e,t,!1)},extend:function(t,e){if(t&&e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},throttle:G,closest:N,toggleClass:Y,clone:Q,index:H,nextTick:te,cancelNextTick:ee,detectDirection:Ft,getChild:F},Gt.get=function(t){return t[J]},Gt.mount=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e[0].constructor===Array&&(e=e[0]),e.forEach((function(t){if(!t.prototype||!t.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(t));t.utils&&(Gt.utils=A(A({},Gt.utils),t.utils)),et.mount(t)}))},Gt.create=function(t,e){return new Gt(t,e)},Gt.version="1.14.0";var ne,oe,re,ie,ae,le,se=[],ce=!1;function de(){se.forEach((function(t){clearInterval(t.pid)})),se=[]}function ue(){clearInterval(le)}var pe=G((function(t,e,n,o){if(e.scroll){var r,i=(t.touches?t.touches[0]:t).clientX,a=(t.touches?t.touches[0]:t).clientY,l=e.scrollSensitivity,s=e.scrollSpeed,c=z(),d=!1;oe!==n&&(oe=n,de(),ne=e.scroll,r=e.scrollFn,!0===ne&&(ne=Z(n,!0)));var u=0,p=ne;do{var h=p,f=L(h),g=f.top,A=f.bottom,m=f.left,v=f.right,b=f.width,E=f.height,C=void 0,B=void 0,y=h.scrollWidth,w=h.scrollHeight,x=j(h),S=h.scrollLeft,k=h.scrollTop;h===c?(C=b<y&&("auto"===x.overflowX||"scroll"===x.overflowX||"visible"===x.overflowX),B=E<w&&("auto"===x.overflowY||"scroll"===x.overflowY||"visible"===x.overflowY)):(C=b<y&&("auto"===x.overflowX||"scroll"===x.overflowX),B=E<w&&("auto"===x.overflowY||"scroll"===x.overflowY));var D=C&&(Math.abs(v-i)<=l&&S+b<y)-(Math.abs(m-i)<=l&&!!S),_=B&&(Math.abs(A-a)<=l&&k+E<w)-(Math.abs(g-a)<=l&&!!k);if(!se[u])for(var T=0;T<=u;T++)se[T]||(se[T]={});se[u].vx==D&&se[u].vy==_&&se[u].el===h||(se[u].el=h,se[u].vx=D,se[u].vy=_,clearInterval(se[u].pid),0==D&&0==_||(d=!0,se[u].pid=setInterval(function(){o&&0===this.layer&&Gt.active._onTouchMove(ae);var e=se[this.layer].vy?se[this.layer].vy*s:0,n=se[this.layer].vx?se[this.layer].vx*s:0;"function"==typeof r&&"continue"!==r.call(Gt.dragged.parentNode[J],n,e,t,ae,se[this.layer].el)||K(se[this.layer].el,n,e)}.bind({layer:u}),24))),u++}while(e.bubbleScroll&&p!==c&&(p=Z(p,!1)));ce=d}}),30),he=function(t){var e=t.originalEvent,n=t.putSortable,o=t.dragEl,r=t.activeSortable,i=t.dispatchSortableEvent,a=t.hideGhostForTarget,l=t.unhideGhostForTarget;if(e){var s=n||r;a();var c=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e,d=document.elementFromPoint(c.clientX,c.clientY);l(),s&&!s.el.contains(d)&&(i("spill"),this.onSpill({dragEl:o,putSortable:n}))}};function fe(){}function ge(){}fe.prototype={startIndex:null,dragStart:function(t){var e=t.oldDraggableIndex;this.startIndex=e},onSpill:function(t){var e=t.dragEl,n=t.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var o=F(this.sortable.el,this.startIndex,this.options);o?this.sortable.el.insertBefore(e,o):this.sortable.el.appendChild(e),this.sortable.animateAll(),n&&n.animateAll()},drop:he},b(fe,{pluginName:"revertOnSpill"}),ge.prototype={onSpill:function(t){var e=t.dragEl,n=t.putSortable||this.sortable;n.captureAnimationState(),e.parentNode&&e.parentNode.removeChild(e),n.animateAll()},drop:he},b(ge,{pluginName:"removeOnSpill"}),Gt.mount(new function(){function t(){for(var t in this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0},this)"_"===t.charAt(0)&&"function"==typeof this[t]&&(this[t]=this[t].bind(this))}return t.prototype={dragStarted:function(t){var e=t.originalEvent;this.sortable.nativeDraggable?_(document,"dragover",this._handleAutoScroll):this.options.supportPointer?_(document,"pointermove",this._handleFallbackAutoScroll):e.touches?_(document,"touchmove",this._handleFallbackAutoScroll):_(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(t){var e=t.originalEvent;this.options.dragOverBubble||e.rootEl||this._handleAutoScroll(e)},drop:function(){this.sortable.nativeDraggable?T(document,"dragover",this._handleAutoScroll):(T(document,"pointermove",this._handleFallbackAutoScroll),T(document,"touchmove",this._handleFallbackAutoScroll),T(document,"mousemove",this._handleFallbackAutoScroll)),ue(),de(),clearTimeout(M),M=void 0},nulling:function(){ae=oe=ne=ce=le=re=ie=null,se.length=0},_handleFallbackAutoScroll:function(t){this._handleAutoScroll(t,!0)},_handleAutoScroll:function(t,e){var n=this,o=(t.touches?t.touches[0]:t).clientX,r=(t.touches?t.touches[0]:t).clientY,i=document.elementFromPoint(o,r);if(ae=t,e||this.options.forceAutoScrollFallback||y||B||x){pe(t,this.options,i,e);var a=Z(i,!0);!ce||le&&o===re&&r===ie||(le&&ue(),le=setInterval((function(){var i=Z(document.elementFromPoint(o,r),!0);i!==a&&(a=i,de()),pe(t,n.options,i,e)}),10),re=o,ie=r)}else{if(!this.options.bubbleScroll||Z(i,!0)===z())return void de();pe(t,this.options,Z(i,!1),!1)}}},b(t,{pluginName:"scroll",initializeByDefault:!0})}),Gt.mount(ge,fe);const Ae=Gt,me=t=>{const e=document.getElementById("list");e.innerHTML="";for(let n=0;n<t.length;n+=1){const o=document.createElement("li"),r=document.createElement("i"),i=document.createElement("i"),a=document.createElement("div"),l=document.createElement("p"),s=document.createElement("input");if(t[n].completed){const t=document.createElement("i");t.className="fas fa-check",a.appendChild(t),l.classList.add("completed")}else{const t=document.createElement("input");t.type="checkbox",t.className="check",a.appendChild(t)}i.className="fas fa-edit d-none",s.type="text",s.id="edit-Description",s.className="edit-description d-none",o.id=t[n].index,r.className="fas fa-trash",a.classList.add("description-container"),l.className+=" description",l.innerHTML+=` ${t[n].description}`,a.appendChild(l),a.appendChild(s),o.className="task",o.setAttribute("draggable","true"),o.appendChild(a),o.appendChild(r),o.appendChild(i),e.appendChild(o)}},ve=t=>{localStorage.setItem("storage",JSON.stringify(t))},be=t=>{for(let e=0;e<t.length;e+=1)t[e].index=e+1},Ee=(t,e,n)=>{t.forEach((t=>{t.index===e&&(t.completed=n)}))},Ce=()=>{const t=JSON.parse(localStorage.getItem("storage"));return null!==t?t:[]};let Be=Ce();me(Be);const ye=document.getElementById("list"),we=document.getElementById("clear-list");ye.addEventListener("click",(t=>{t.target!==t.currentTarget&&("check"===t.target.className&&(Be=Ce(),Ee(Be,parseInt(t.target.parentElement.parentElement.id,10),!0),me(Be),ve(Be)),"fas fa-check"===t.target.className&&(Be=Ce(),Ee(Be,parseInt(t.target.parentElement.parentElement.id,10),!1),me(Be),ve(Be)),"fas fa-trash"===t.target.className&&(Be=Ce(),Be=((t,e)=>t.filter((t=>t.index!==e)))(Be,parseInt(t.target.parentElement.id,10)),be(Be),ve(Be),me(Be)),t.target.classList.contains("description")&&(Be=Ce(),((t,e)=>{const n=parseInt(e.parentElement.parentElement.id,10);let o=e.innerText;const r=e.parentElement.lastChild,i=e.parentElement.parentElement.lastChild,a=i.previousSibling;e.classList.add("d-none"),a.classList.add("d-none"),i.classList.remove("d-none"),r.value=o,r.classList.remove("d-none"),r.addEventListener("keyup",(()=>{o=r.value})),i.addEventListener("click",(()=>{for(let e=0;e<t.length;e+=1)t[e].index===n&&(t[e].description=o);i.classList.add("d-none"),a.classList.remove("d-none"),r.classList.add("d-none"),e.classList.remove("d-none"),ve(t),me(t)}))})(Be,t.target))),t.stopPropagation()})),we.addEventListener("click",(()=>{Be=(t=>(t=t.filter((t=>!1===t.completed)),be(t),ve(t),t))(Be),me(Be)})),document.getElementById("add").addEventListener("click",(()=>{const t=document.getElementById("task-desc").value;((t,e)=>{const n=0===t.length?1:t[t.length-1].index+1;t.push({description:e,index:n,completed:!1})})(Be,t),document.getElementById("task-desc").value="",ve(Be),me(Be)})),new Ae(ye,{animation:100,ghostClass:"dragging"}),ye.addEventListener("dragend",(t=>{Be=(t=>{const e=t.children,n=Ce(),o=[];return Array.from(e).forEach((t=>{const e=parseInt(t.id,10),r=n.findIndex((t=>t.index===e));o.push(n[r])})),be(o),ve(o),o})(ye),me(Be),t.stopPropagation()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,